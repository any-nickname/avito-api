// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	entity "avito-rest-api/internal/entity"
	service "avito-rest-api/internal/service"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// AddUserToSegments mocks base method.
func (m *MockUser) AddUserToSegments(ctx context.Context, id int, segments []entity.UserSegmentInformation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToSegments", ctx, id, segments)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToSegments indicates an expected call of AddUserToSegments.
func (mr *MockUserMockRecorder) AddUserToSegments(ctx, id, segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToSegments", reflect.TypeOf((*MockUser)(nil).AddUserToSegments), ctx, id, segments)
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(ctx context.Context, input service.UserCreateInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), ctx, input)
}

// DeleteUserFromSegments mocks base method.
func (m *MockUser) DeleteUserFromSegments(ctx context.Context, id int, segments []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromSegments", ctx, id, segments)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromSegments indicates an expected call of DeleteUserFromSegments.
func (mr *MockUserMockRecorder) DeleteUserFromSegments(ctx, id, segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromSegments", reflect.TypeOf((*MockUser)(nil).DeleteUserFromSegments), ctx, id, segments)
}

// GetAllUsers mocks base method.
func (m *MockUser) GetAllUsers(ctx context.Context) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserMockRecorder) GetAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUser)(nil).GetAllUsers), ctx)
}

// GetAllUsersWithSegments mocks base method.
func (m *MockUser) GetAllUsersWithSegments(ctx context.Context) ([]entity.UserWithSegments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersWithSegments", ctx)
	ret0, _ := ret[0].([]entity.UserWithSegments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersWithSegments indicates an expected call of GetAllUsersWithSegments.
func (mr *MockUserMockRecorder) GetAllUsersWithSegments(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersWithSegments", reflect.TypeOf((*MockUser)(nil).GetAllUsersWithSegments), ctx)
}

// GetUserByID mocks base method.
func (m *MockUser) GetUserByID(ctx context.Context, id int) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUser)(nil).GetUserByID), ctx, id)
}

// GetUserSegmentsByUserID mocks base method.
func (m *MockUser) GetUserSegmentsByUserID(ctx context.Context, id int) ([]entity.UserSegmentInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSegmentsByUserID", ctx, id)
	ret0, _ := ret[0].([]entity.UserSegmentInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSegmentsByUserID indicates an expected call of GetUserSegmentsByUserID.
func (mr *MockUserMockRecorder) GetUserSegmentsByUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSegmentsByUserID", reflect.TypeOf((*MockUser)(nil).GetUserSegmentsByUserID), ctx, id)
}

// GetUserWithSegmentsByUserID mocks base method.
func (m *MockUser) GetUserWithSegmentsByUserID(ctx context.Context, id int) (entity.UserWithSegments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithSegmentsByUserID", ctx, id)
	ret0, _ := ret[0].(entity.UserWithSegments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithSegmentsByUserID indicates an expected call of GetUserWithSegmentsByUserID.
func (mr *MockUserMockRecorder) GetUserWithSegmentsByUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithSegmentsByUserID", reflect.TypeOf((*MockUser)(nil).GetUserWithSegmentsByUserID), ctx, id)
}

// MockSegment is a mock of Segment interface.
type MockSegment struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentMockRecorder
}

// MockSegmentMockRecorder is the mock recorder for MockSegment.
type MockSegmentMockRecorder struct {
	mock *MockSegment
}

// NewMockSegment creates a new mock instance.
func NewMockSegment(ctrl *gomock.Controller) *MockSegment {
	mock := &MockSegment{ctrl: ctrl}
	mock.recorder = &MockSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegment) EXPECT() *MockSegmentMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockSegment) CreateSegment(ctx context.Context, input service.SegmentCreateInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentMockRecorder) CreateSegment(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegment)(nil).CreateSegment), ctx, input)
}

// DeleteSegment mocks base method.
func (m *MockSegment) DeleteSegment(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentMockRecorder) DeleteSegment(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegment)(nil).DeleteSegment), ctx, name)
}

// GetAllSegments mocks base method.
func (m *MockSegment) GetAllSegments(ctx context.Context, sType int) ([]entity.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSegments", ctx, sType)
	ret0, _ := ret[0].([]entity.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSegments indicates an expected call of GetAllSegments.
func (mr *MockSegmentMockRecorder) GetAllSegments(ctx, sType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSegments", reflect.TypeOf((*MockSegment)(nil).GetAllSegments), ctx, sType)
}

// GetSegmentByName mocks base method.
func (m *MockSegment) GetSegmentByName(ctx context.Context, name string) (entity.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentByName", ctx, name)
	ret0, _ := ret[0].(entity.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentByName indicates an expected call of GetSegmentByName.
func (mr *MockSegmentMockRecorder) GetSegmentByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentByName", reflect.TypeOf((*MockSegment)(nil).GetSegmentByName), ctx, name)
}

// MockReport is a mock of Report interface.
type MockReport struct {
	ctrl     *gomock.Controller
	recorder *MockReportMockRecorder
}

// MockReportMockRecorder is the mock recorder for MockReport.
type MockReportMockRecorder struct {
	mock *MockReport
}

// NewMockReport creates a new mock instance.
func NewMockReport(ctrl *gomock.Controller) *MockReport {
	mock := &MockReport{ctrl: ctrl}
	mock.recorder = &MockReportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReport) EXPECT() *MockReportMockRecorder {
	return m.recorder
}

// MakeReport mocks base method.
func (m *MockReport) MakeReport(ctx context.Context) (entity.ReportCSV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeReport", ctx)
	ret0, _ := ret[0].(entity.ReportCSV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeReport indicates an expected call of MakeReport.
func (mr *MockReportMockRecorder) MakeReport(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeReport", reflect.TypeOf((*MockReport)(nil).MakeReport), ctx)
}
